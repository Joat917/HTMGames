<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>MswHtm</title>
    <style>
        body {
            padding: 0;
            margin: 0;
            user-select: none;
            background-color: #ac2;
            color: #a6a;
            font-size: 18px;
            font-weight: 700;
        }

        .header {
            text-align: center;
        }

        .button {
            display: inline-block;
            background-color: #9de;
            padding: 8px 15px;
            margin: 5px 10px;
            cursor: pointer;
            border-radius: 10px;
            position: relative;
            top: -2px;
            left: -2px;
            box-shadow: -2px -2px 2px #666,
                2px 2px 2px #ccc,
                -2px -2px 2px inset #ccc,
                2px 2px 2px inset #666;
        }

        .button:hover {
            background-color: #0ae;
        }

        .button:active {
            /* background-color: #0ae; */
            box-shadow: -1px -1px 1px #666,
                1px 1px 1px #ccc,
                -1px -1px 1px inset #ccc,
                1px 1px 1px inset #666;
            top: -1px;
            left: -1px;
        }

        .displaybox {
            display: inline-block;
            margin: 5px 10px;
            padding: 7px 15px;
            background-color: #ddd;
            color: #222;
            border-radius: 10px;
            box-shadow:
                -3px -3px 3px inset #666,
                1px 1px 1px inset #666;
        }

        .grid {
            text-align: center;
        }

        .row {
            height: 36px;
        }

        .node {
            background-color: #b75;
            color: #fff;
            font-size: 24px;
            width: 32px;
            height: 32px;
            display: inline-block;
            margin: 4px;
            border-radius: 10px;
            box-shadow: -1px -1px 1px #966,
                1px 1px 1px #c99,
                -1px -1px 1px inset #c99,
                1px 1px 1px inset #966;
        }

        .dug {
            background-color: #ccc;
            box-shadow: -1px -1px 1px #aaa,
                1px 1px 1px #ddd,
                -1px -1px 1px inset #ddd,
                1px 1px 1px inset #aaa;
            color: #222;
        }

        .zero {
            color: transparent;
        }

        .chosen {
            background-color: #7b5;
            box-shadow: -1px -1px 1px #696,
                1px 1px 1px #9c9,
                -1px -1px 1px inset #9c9,
                1px 1px 1px inset #696;
        }

        .minelose {
            color: #f00;
        }



        .menu {
            background-color: #ddd;
            position: absolute;
            border-radius: 10px;
        }

        .operation {
            color: #222;
            display: inline-block;
            padding: 5px 5px;
            margin: 0;
            border-radius: 10px;
        }

        .operation:hover {
            background-color: #bbb;
            cursor: pointer;
        }

        .operation:active {
            background-color: #999;
        }

        #settings div {
            display: block;
        }

        .menu input {
            width: 50px;
            border-radius: 10px;
            background-color: transparent;
        }
    </style>
    <link rel="shortcut icon" href="/favicon.ico" type="image/x-icon">
</head>

<body>
    <div class="header">
        <div class="displaybox" id="timer">00:00:00</div>
        <div class="displaybox" id="mineleft">00</div>
        <div class="button" id="reset">Reset</div>
        <div class="button" id="setting">Settings</div>
    </div>

    <div class="grid">
    </div>

    <div class="menu" id="operation">
        <div class="operation" id="dig">Dig</div>
        <div class="operation" id="flag">Flag</div>
        <div class="operation" id="question">Question</div>
        <div class="operation" id="sweep">Sweep</div>
    </div>

    <div class="menu" id="settings">
        <form>
            <div>Cols: <input type="number" name="col" id="input_col" value="8"></div>
            <div>Rows: <input type="number" name="row" id="input_row" value="8"></div>
            <div>Mines: <input type="number" name="mines" id="input_mines" value="10"></div>
        </form>
    </div>

    </div>
    <script>
        const timer = document.querySelector('#timer');
        const mineleft = document.querySelector('#mineleft');
        const button_reset = document.querySelector('#reset');
        const button_setting = document.querySelector('#setting');
        const grid = document.querySelector('.grid');
        const menu_operation = document.querySelector('#operation');
        const menu_settings = document.querySelector('#settings');
        const settings_col = document.querySelector('#input_col');
        const settings_row = document.querySelector('#input_row');
        const settings_mines = document.querySelector('#input_mines');
        let row = 0;
        let col = 0;
        let mines = 10;
        let virtual_grid = []
        let virtual_mineleft = 0;
        let timer_index = 0;
        let timer_tick = 0;
        let focus_node = undefined;
        let focus_coord = [undefined, undefined];
        let minefield = undefined;
        let gamestate = 0;//0:not yet on; 1:on; 2:paused; 3:victory; 4:lose.
        let setting_disabled = false;

        function randint(max) {
            return Math.floor(max * Math.random());
        }

        function getNodeFunc(_col, _row) {
            return function (e) {
                if (focus_node != undefined && focus_node.classList.contains('chosen')) { focus_node.classList.remove('chosen') }
                if (focus_node == getNode(_col, _row)) { menuhide(); focus_node = undefined; focus_coord = [undefined, undefined]; return; }
                if (gamestate == 1) {
                    focus_node = getNode(_col, _row);
                    focus_coord = [_col, _row];
                    if (!focus_node.classList.contains('chosen')) { focus_node.classList.add('chosen') }
                    menushow();
                } else if (gamestate == 0) {
                    minefield = new MineField(_col, _row);
                    minefield.dig(_col, _row);
                    minefield.refresh();
                    clearInterval(timer_index)
                    timer_index = setInterval(tick, 1000);
                    setting_disabled = true;
                    button_setting.style.display = 'none'
                    setting_hide();
                    gamestate = 1;
                    button_reset.style.display = ''
                }

            }
        }

        function addcol(target_col) {
            if (col < target_col) {
                let _count = target_col - col;
                for (let _row_index = 0; _row_index < grid.children.length; _row_index++) {
                    for (let _i = 0; _i < _count; _i++) {
                        let ele = document.createElement('div')
                        ele.classList.add('node');
                        ele.classList.add('zero');
                        ele.innerHTML = '0';
                        grid.children[_row_index].appendChild(ele);
                        virtual_grid[_row_index].push(' ')
                    }
                }
            } else if (col > target_col) {
                while (grid.children[0].children.length > target_col) {
                    for (let _row_index = 0; _row_index < grid.children.length; _row_index++) {
                        grid.children[_row_index].removeChild(grid.children[_row_index].children[target_col]);
                        virtual_grid[_row_index].pop();
                    }
                }
            }
            col = target_col;
        }

        function addrow(target_row) {
            if (row > target_row) {
                while (grid.children.length > target_row) {
                    grid.removeChild(grid.children[target_row]);
                    virtual_grid.pop()
                }
            } else if (row < target_row) {
                while (grid.children.length < target_row) {
                    let _row = document.createElement('div');
                    let _arr = [];
                    _row.classList.add('row');
                    for (let _col_index = 0; _col_index < col; _col_index++) {
                        let ele = document.createElement('div');
                        ele.classList.add('node');
                        ele.classList.add('zero');
                        ele.innerHTML = '0';
                        _row.appendChild(ele);
                        _arr.push(' ');
                    }
                    grid.appendChild(_row);
                    virtual_grid.push(_arr);
                }
            }
            row = target_row;
        }

        function getNode(x, y) {
            return grid.children[y].children[x];
        }


        class MineField {
            constructor(x, y) {
                this.col = col;
                this.row = row;
                this.mines = 0;
                if (col * row <= mines + 8) {
                    alert("Cannot generate such a minefield!");
                    throw new Error('mines too many');
                }
                //
                this.content = [];
                for (let _row = 0; _row < row; ++_row) {
                    this.content.push([])
                    for (let _col = 0; _col < col; ++_col) {
                        this.content[_row].push(0)
                    }
                }
                this.cover = [];
                for (let _row = 0; _row < row; ++_row) {
                    this.cover.push([])
                    for (let _col = 0; _col < col; ++_col) {
                        this.cover[_row].push(0)
                    }
                }
                while (this.mines < mines) {
                    let _col = randint(this.col);
                    let _row = randint(this.row);
                    if (Math.abs(_col - x) > 1 || Math.abs(_row - y) > 1) {
                        if (this.content[_row][_col] == 0) {
                            this.content[_row][_col] = 9;
                            this.mines++;
                        }
                    }
                }
                for (let _row = 0; _row < row; ++_row) {
                    for (let _col = 0; _col < col; ++_col) {
                        if (this.content[_row][_col] < 9) {
                            let _neighbor = this.neighbors(_col, _row);
                            let _minecount = 0;
                            for (let _i = 0; _i < _neighbor.length; _i++) {
                                if (this.content[_neighbor[_i][1]][_neighbor[_i][0]] >= 9) {
                                    _minecount++;
                                }
                            }
                            this.content[_row][_col] = _minecount;
                        }
                    }
                }
                //
                for (let _row = 0; _row < row; ++_row) {
                    for (let _col = 0; _col < col; ++_col) {
                        getNode(_col, _row).onclick = getNodeFunc(_col, _row);
                    }
                }
                mineleft.innerHTML = mine_filter(this.mines);
                virtual_mineleft = this.mines;

            }

            neighbors(x, y) {
                let out = []
                if (x > 0) { out.push([x - 1, y]) }
                if (x < this.col - 1) { out.push([x + 1, y]) }
                if (y > 0) { out.push([x, y - 1]) }
                if (y < this.row - 1) { out.push([x, y + 1]) }
                if (x > 0 && y > 0) { out.push([x - 1, y - 1]) }
                if (x < this.col - 1 && y > 0) { out.push([x + 1, y - 1]) }
                if (x > 0 && y < this.row - 1) { out.push([x - 1, y + 1]) }
                if (x < this.col - 1 && y < this.row - 1) { out.push([x + 1, y + 1]) }
                return out;
            }

            show_console() {
                let out = '';
                for (let _row = 0; _row < row; ++_row) {
                    for (let _col = 0; _col < col; ++_col) {
                        out += this.content[_row][_col];
                        out += ' ';
                    }
                    out += '\n';
                }
                console.log(out);
            }

            dig(x, y) {
                if (this.cover[y][x] == 0 || this.cover[y][x] == 3) {
                    this.cover[y][x] = 1;
                    if (this.content[y][x] == 0) {
                        this.sweep(x, y);
                    }
                    if (this.whether_victory()) {
                        victory();
                    }
                    return true;
                }
                return false;
            }

            sweep(x, y) {
                let _neighbor = this.neighbors(x, y);
                let out = false;
                for (let _i = 0; _i < _neighbor.length; _i++) {
                    out |= this.dig(_neighbor[_i][0], _neighbor[_i][1]);
                }
                return out;
            }

            flag(x, y) {
                if (this.cover[y][x] == 0 || this.cover[y][x] == 3) {
                    this.cover[y][x] = 2;
                    virtual_mineleft -= 1;
                    mineleft.innerHTML = mine_filter(virtual_mineleft);
                    return true;
                } else if (this.cover[y][x] == 2) {
                    this.cover[y][x] = 0;
                    virtual_mineleft += 1;
                    mineleft.innerHTML = mine_filter(virtual_mineleft);
                    return true;
                }
                return false;
            }

            question(x, y) {
                if (this.cover[y][x] == 3) {
                    this.cover[y][x] = 0;
                    return true;
                } else if (this.cover[y][x] == 0 || this.cover[y][x] == 2) {
                    this.cover[y][x] = 3;
                    return true;
                }
                return false;
            }

            refresh() {
                for (let _row = 0; _row < row; ++_row) {
                    for (let _col = 0; _col < col; ++_col) {
                        let node = getNode(_col, _row);
                        let dug = (this.cover[_row][_col] == 1);
                        if (dug) {
                            if (!node.classList.contains('dug')) { node.classList.add('dug'); }
                            if (this.content[_row][_col] == 0) {
                                if (node.innerHTML != '0') { node.innerHTML = '0'; }
                            } else if (this.content[_row][_col] >= 9) {
                                node.classList.add('minelose')
                                lose();
                                if (node.innerHTML != 'X') { node.innerHTML = 'X'; }
                            } else {
                                if (node.innerHTML != this.content[_row][_col]) { node.innerHTML = this.content[_row][_col]; }
                            }
                        } else {
                            if (node.classList.contains('dug')) { node.classList.remove('dug'); }
                            if (this.cover[_row][_col] == 0) {
                                if (node.innerHTML != '0') { node.innerHTML = '0'; }
                            } else if (this.cover[_row][_col] == 2) {
                                if (node.innerHTML != 'f') { node.innerHTML = 'f'; }
                            } else if (this.cover[_row][_col] == 3) {
                                if (node.innerHTML != '?') { node.innerHTML = '?'; }
                            }
                        }
                        if (node.innerHTML == '0') {
                            if (!node.classList.contains('zero')) { node.classList.add('zero') }
                        } else if (node.innerHTML != '0') {
                            if (node.classList.contains('zero')) { node.classList.remove('zero') }
                        }
                    }
                }
            }

            whether_victory() {
                for (let _row = 0; _row < row; ++_row) {
                    for (let _col = 0; _col < col; ++_col) {
                        if (this.content[_row][_col] < 9) {
                            if (this.cover[_row][_col] != 1) {
                                return false;
                            }
                        }
                    }
                }
                return true;
            }


        }

        function getAbsPos(ele) {
            let ele0 = ele;
            let t = ele.offsetTop;
            let l = ele.offsetLeft;
            while (ele = ele.offsetParent) {
                t += ele.offsetTop;
                l += ele.offsetLeft;
            }
            return { left: l, top: t, right: l + ele0.offsetWidth, bottom: t + ele0.offsetHeight };
        }

        function menushow() {
            menuhide();
            // edit the buttons
            if (minefield.cover[focus_coord[1]][focus_coord[0]] == 0) {
                menu_operation.children[2].style.display = 'none';
                menu_operation.children[3].style.display = 'none';
            } else if (minefield.cover[focus_coord[1]][focus_coord[0]] == 1) {
                menu_operation.children[0].style.display = 'none';
                menu_operation.children[1].style.display = 'none';
                menu_operation.children[2].style.display = 'none';
            } else if (minefield.cover[focus_coord[1]][focus_coord[0]] == 2) {
                menu_operation.children[0].style.display = 'none';
                menu_operation.children[1].style.display = 'none';
                menu_operation.children[1].innerHTML = 'unFlag';
                menu_operation.children[3].style.display = 'none';
            } else if (minefield.cover[focus_coord[1]][focus_coord[0]] == 3) {
                menu_operation.children[1].style.display = 'none';
                menu_operation.children[2].innerHTML = 'deQuestion';
                menu_operation.children[3].style.display = 'none';
            }
            //show
            menu_operation.style.left = '0px';
            menu_operation.style.top = '0px';
            menu_operation.style.display = '';
            //place
            if (focus_node == undefined) { return; }
            let tx = getAbsPos(focus_node).right, ty = getAbsPos(focus_node).bottom;
            let mw = menu_operation.clientWidth, mh = menu_operation.clientHeight;
            let ox = tx, oy = ty;
            if (ox + mw > document.body.clientWidth) {
                ox = document.body.clientWidth - mw;
            }
            if (ox < 0) { ox = 0 }
            if (oy + mh > document.body.clientHeight) {
                oy = document.body.clientHeight - mh;
            }
            if (oy < 0) { oy = 0 }
            menu_operation.style.left = ox + 'px';
            menu_operation.style.top = oy + 'px';



        }

        function menuhide() {
            menu_operation.style.display = 'none';
            menu_operation.children[0].style.display = '';
            menu_operation.children[1].style.display = '';
            menu_operation.children[2].style.display = '';
            menu_operation.children[3].style.display = '';
            menu_operation.children[1].innerHTML = 'Flag';
            menu_operation.children[2].innerHTML = 'Question';
        }

        function reset() {
            mineleft.style.color = '';
            timer.style.color = '';
            timer_tick = 0;
            timer.innerHTML = tick2time(timer_tick);
            gamestate = 0;
            clearInterval(timer_index);
            setting_disabled = false;
            button_setting.style.display = ''
            button_reset.style.display = 'none'
            menuhide();
            setting_hide();
            minefield = new MineField(0, 0);
            minefield.refresh();
            for (let _row = 0; _row < row; ++_row) {
                for (let _col = 0; _col < col; ++_col) {
                    if (getNode(_col, _row).classList.contains('chosen')) { getNode(_col, _row).classList.remove('chosen') }
                    if (getNode(_col, _row).classList.contains('minelose')) { getNode(_col, _row).classList.remove('minelose') }
                    if (getNode(_col, _row).classList.contains('dug')) { getNode(_col, _row).classList.remove('dug') }
                }
            }

        }

        function tick2time(tick) {
            if (tick <= 0) { return "00:00:00" }
            else if (tick >= 359999) { return "99:59:59" }
            let hr = Math.floor(tick / 3600);
            let mn = Math.floor(tick / 60) % 60;
            let sc = Math.floor(tick % 60);
            hr = '' + hr;
            mn = '' + mn;
            sc = '' + sc;
            while (hr.length < 2) { hr = '0' + hr }
            while (mn.length < 2) { mn = '0' + mn }
            while (sc.length < 2) { sc = '0' + sc }
            return `${hr}:${mn}:${sc}`
        }

        function tick() {
            timer_tick++;
            timer.innerHTML = tick2time(timer_tick);
        }

        function mine_filter(minecount) {
            if (minecount <= 0) { return 0 }
            else if (minecount < 10) { return '0' + minecount }
            else if (minecount < 100) { return '' + minecount }
            else { return '99+' }
        }


        function victory() {
            gamestate = 3;
            mineleft.style.color = '#3b3';
            timer.style.color = '#3b3';
            mineleft.innerHTML = '00'
            button_reset.style.display = ''
            clearInterval(timer_index);
        }

        function lose() {
            gamestate = 4;
            mineleft.style.color = '#b33';
            timer.style.color = '#b33';
            button_reset.style.display = ''
            clearInterval(timer_index);
        }

        function setting_show() {
            if (setting_disabled) { return; }
            menu_settings.style.display = ''
            settings_col.value = col;
            settings_row.value = row;
            settings_mines.value = mines;
            let tx = getAbsPos(button_setting).right, ty = getAbsPos(button_setting).bottom;
            let mw = menu_settings.clientWidth, mh = menu_settings.clientHeight;
            let ox = tx, oy = ty;
            if (ox + mw > document.documentElement.clientWidth) {
                ox = document.documentElement.clientWidth - mw;
            }
            if (ox < 0) { ox = 0 }
            if (oy < 0) { oy = 0 }
            menu_settings.style.left = ox + 'px';
            menu_settings.style.top = oy + 'px';

        }

        function setting_hide() {
            menu_settings.style.display = 'none';
            let _col = col, _row = row, _mines = mines;
            if (col != +settings_col.value || row != +settings_row.value || mines != +settings_mines.value) {
                if (isFinite(+settings_col.value) && col != +settings_col.value) {
                    if (+settings_col.value <= 4) { _col = 4; }
                    else if (40 * settings_col.value > grid.clientWidth) { _col = Math.floor(grid.clientWidth / 40); }
                    else { _col = +settings_col.value }
                }
                if (isFinite(+settings_row.value) && _row != +settings_row.value) {
                    if (+settings_row.value <= 4) { _row = 4; }
                    else { _row = +settings_row.value }
                }
                if (isFinite(+settings_mines.value) && _mines != +settings_mines.value) {
                    if (+settings_mines.value <= 1) { _mines = 1; }
                    else { _mines = +settings_mines.value; }
                }

                if (_col * _row < _mines + 15) {
                    _mines = _col * _row - 15;
                }
                addcol(_col);
                addrow(_row);
                mines = _mines;
                minefield = new MineField(0, 0);
            }
        }


        menu_operation.children[0].addEventListener('click', function () {
            minefield.dig(focus_coord[0], focus_coord[1]);
            minefield.refresh()
            if (focus_node.classList.contains('chosen')) { focus_node.classList.remove('chosen') }
            focus_node = undefined;
            focus_coord = [undefined, undefined];
            menuhide()
        })

        menu_operation.children[1].addEventListener('click', function () {
            minefield.flag(focus_coord[0], focus_coord[1]);
            minefield.refresh()
            if (focus_node.classList.contains('chosen')) { focus_node.classList.remove('chosen') }
            focus_node = undefined;
            focus_coord = [undefined, undefined];
            menuhide()
        })

        menu_operation.children[2].addEventListener('click', function () {
            minefield.question(focus_coord[0], focus_coord[1]);
            minefield.refresh()
            if (focus_node.classList.contains('chosen')) { focus_node.classList.remove('chosen') }
            focus_node = undefined;
            focus_coord = [undefined, undefined];
            menuhide()
        })

        menu_operation.children[3].addEventListener('click', function () {
            minefield.sweep(focus_coord[0], focus_coord[1]);
            minefield.refresh()
            if (focus_node.classList.contains('chosen')) { focus_node.classList.remove('chosen') }
            focus_node = undefined;
            focus_coord = [undefined, undefined];
            menuhide()
        })

        button_reset.addEventListener('click', reset);
        button_setting.addEventListener('click', setting_show);

        document.addEventListener('click', function (e) {
            let rect = menu_settings.getClientRects()[0];
            if (rect === undefined) { return; }
            if (e.pageX < rect.left - 10 || e.pageX > rect.left + rect.width + 10 || e.pageY < rect.top - 10 || e.pageY > rect.top + rect.height + 10) {
                let rect = button_setting.getClientRects()[0];
                if (e.pageX < rect.left - 10 || e.pageX > rect.left + rect.width + 10 || e.pageY < rect.top - 10 || e.pageY > rect.top + rect.height + 10) {
                    setting_hide();
                    e.stopPropagation();
                }
            }
        }, true)

        reset();


    </script>
</body>

</html>